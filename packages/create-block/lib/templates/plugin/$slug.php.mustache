<?php
/**
 * Plugin Name:       {{title}}
{{#pluginURI}}
 * Plugin URI:        {{{pluginURI}}}
{{/pluginURI}}
{{#description}}
 * Description:       {{description}}
{{/description}}
 * Requires at least: 6.6
 * Requires PHP:      7.2
 * Version:           {{version}}
{{#author}}
 * Author:            {{author}}
{{/author}}
{{#license}}
 * License:           {{license}}
{{/license}}
{{#licenseURI}}
 * License URI:       {{{licenseURI}}}
{{/licenseURI}}
 * Text Domain:       {{textdomain}}
{{#domainPath}}
 * Domain Path:       {{{domainPath}}}
{{/domainPath}}
{{#updateURI}}
 * Update URI:        {{{updateURI}}}
{{/updateURI}}
 *
 * @package {{namespacePascalCase}}
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function {{namespaceSnakeCase}}_{{slugSnakeCase}}_block_init() {

	{{#isMultiVariant}}
	// wp_register_block_metadata_collection was introduced in WP 6.7.
	if ( function_exists( 'wp_register_block_metadata_collection' ) ) {
		// Register the block metadata.
		wp_register_block_metadata_collection(
			__DIR__ . '/build',
			__DIR__ . '/build/blocks-manifest.php'
		);
	}
	// Register the blocks.
	$blocks = glob( __DIR__  . '/*', GLOB_ONLYDIR );
	foreach ( $blocks as $block ) {
		register_block_type( $block );
	}
	{{/isMultiVariant}}
	{{^isMultiVariant}}
	// Register the block.
	register_block_type( __DIR__ . '/build' );
	{{/isMultiVariant}}
}
add_action( 'init', '{{namespaceSnakeCase}}_{{slugSnakeCase}}_block_init' );
